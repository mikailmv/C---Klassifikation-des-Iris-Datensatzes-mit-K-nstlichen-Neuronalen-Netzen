using Accord.Neuro;
using Accord.Neuro.Networks;
using Accord.Neuro.Learning;
using Accord.Math;
using System;
using System.Linq;

public class Iris
{
    public double[] Merkmale { get; set; }
    public int Label { get; set; }
}

class Program
{
    static void Main()
    {
        // Beispiel-Iris-Daten (Merkmale und Labels)
        Iris[] trainingData = new Iris[]
        {
            new Iris { Merkmale = new double[] { 5.1, 3.5, 1.4, 0.2 }, Label = 0 },
            new Iris { Merkmale = new double[] { 4.9, 3.0, 1.4, 0.2 }, Label = 0 },
            new Iris { Merkmale = new double[] { 4.7, 3.2, 1.3, 0.2 }, Label = 0 },
            new Iris { Merkmale = new double[] { 4.6, 3.1, 1.5, 0.2 }, Label = 0 },
            new Iris { Merkmale = new double[] { 5.0, 3.6, 1.4, 0.2 }, Label = 0 },
            // Weitere Datenpunkte hinzufügen
            // 0: Iris-setosa, 1: Iris-versicolor, 2: Iris-virginica
        };

        // Merkmale und Labels trennen
        double[][] eingaben = trainingData.Select(d => d.Merkmale).ToArray();
        int[] ausgaben = trainingData.Select(d => d.Label).ToArray();

        // Netzwerkspezifikationen
        int inputSize = 4;  // Anzahl der Merkmale
        int hiddenSize = 5; // Anzahl der versteckten Neuronen
        int outputSize = 3; // Anzahl der Klassen

        // Erstellen des neuronalen Netzwerks
        var netzwerk = new ActivationNetwork(new SigmoidFunction(), inputSize, hiddenSize, outputSize);
        var trainer = new BackPropagationLearning(netzwerk);

        // Training des Netzwerks
        double[][] outputs = ausgaben.Select(label => new double[] {
            label == 0 ? 1.0 : 0.0,
            label == 1 ? 1.0 : 0.0,
            label == 2 ? 1.0 : 0.0
        }).ToArray();

        for (int epoch = 0; epoch < 1000; epoch++)
        {
            double error = trainer.RunEpoch(eingaben, outputs);
            Console.WriteLine($"Epoche {epoch + 1}: Fehler = {error}");
        }

        // Testdaten
        double[] testMerkmale = new double[] { 5.1, 3.5, 1.4, 0.2 };
        double[] result = netzwerk.Compute(testMerkmale);

        int predictedLabel = Array.IndexOf(result, result.Max());
        Console.WriteLine($"Vorhergesagte Klasse für Testdaten: {predictedLabel}");
    }
}
